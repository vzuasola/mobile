variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - tests
  - package
  - deploy-test
  - deploy-staging
  - deploy-production

before_script:
  - export PACKAGE_VERSION="$CI_COMMIT_REF_NAME.$CI_PIPELINE_ID"
  - export DEPLOY_STATUS_URL="$DEPLOY_URL/lastBuild/api/json"
  - export DEPLOY_RESULT_URL="$DEPLOY_URL/lastBuild/logText/progressiveText?start=0"
  - export GITLAB_EMAIL="$GITLAB_USER_EMAIL"

phpcs checker:
  stage: tests
  tags: [build, docker]
  image: registry.gitlab.com/sportion/marketing/websites/websites-commons/shared-images/phpcs:latest
  script:
    - phpcs src/
  allow_failure: false

es linter:
  stage: tests
  tags: [build, docker]
  image: registry.gitlab.com/sportion/marketing/websites/websites-commons/shared-images/eslint:node-6.9
  script:
    - eslint assets/script

ts linter:
  stage: tests
  tags: [build, docker]
  image: registry.gitlab.com/sportion/marketing/websites/websites-commons/shared-images/tslint:node-6.9
  script:
    - tslint -c tslint.json '**/*.ts'

php vulnerability checker:
  stage: tests
  tags: [build, docker]
  image: registry.gitlab.com/sportion/marketing/websites/websites-commons/shared-images/php_vulnerability:latest
  script:
    - /tmp/vendor/bin/local-php-security-checker
  allow_failure: true

create package:
  stage: package
  when: manual
  tags: [build, dind]
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:dind
  needs: [php vulnerability checker, es linter, ts linter, phpcs checker]
  script:
    - eval $(ssh-agent -s)
    - echo "$FECORE_DEPLOY_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - touch ~/.ssh/config
    - touch ~/.ssh/known_hosts
    - chmod -R 400 ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - DOCKER_BUILDKIT=1 docker build --build-arg PACKAGE_VERSION=$PACKAGE_VERSION --build-arg CI_PROJECT_NAME=$CI_PROJECT_NAME --build-arg ARTIFACTORY_URL=$ARTIFACTORY_URL --build-arg ARTIFACTORY_PASSWORD=$ARTIFACTORY_PASSWORD --ssh default --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA -f automation/Dockerfile.create-package .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker rmi $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker rmi $CI_REGISTRY_IMAGE:latest


tct:
  stage: deploy-test
  environment:
    name: tct
  variables:
    env: tct
  script:
    - export DEPLOY_TOKEN DEPLOY_URL ESL_PLAYBOOKS_BRANCH
    - bash automation/jenkins_deploy.sh
  when: manual
  needs: [create package]
  tags: [build, docker]
  image: registry.gitlab.com/sportion/marketing/websites/websites-commons/shared-images/deployment
  allow_failure: false


staging:
  stage: deploy-staging
  environment:
    name: staging
  variables:
    env: stg
  script:
    - export DEPLOY_TOKEN DEPLOY_URL ESL_PLAYBOOKS_BRANCH
    - bash automation/jenkins_deploy.sh
  when: manual
  needs: [create package]
  tags: [build, docker]
  image: registry.gitlab.com/sportion/marketing/websites/websites-commons/shared-images/deployment
  allow_failure: false

production:
  stage: deploy-production
  environment:
    name: production
  variables:
    env: prd
  script:
    - export DEPLOY_URL="$PROD_DEPLOY_URL"
    - export DEPLOY_STATUS_URL="$DEPLOY_URL/lastBuild/api/json"
    - export DEPLOY_RESULT_URL="$DEPLOY_URL/lastBuild/logText/progressiveText?start=0"
    - export DEPLOY_TOKEN="$PROD_DEPLOY_TOKEN"
    - export ESL_PLAYBOOKS_BRANCH
    - bash automation/jenkins_deploy.sh
  when: manual
  needs: [create package]
  tags: [build, docker]
  image: registry.gitlab.com/sportion/marketing/websites/websites-commons/shared-images/deployment
  only:
    - /^release-.*$/
    - /^hotfix-.*$/
    - tags

