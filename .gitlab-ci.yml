variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - tests
  - package
  - deploy-dev
  - integration-tests-development
  - performance-tests-development
  - security-tests-development
  - deploy-test
  - integration-tests-test
  - performance-tests-test
  - security-tests-test
  - testing-signoff
  - deploy-staging
  - integration-tests-staging
  - performance-tests-staging
  - security-tests-staging
  - staging-signoff
  - deploy-production

before_script:
  - export PACKAGE_VERSION="$CI_COMMIT_REF_NAME.$CI_PIPELINE_ID"
  - export DEPLOY_STATUS_URL="$DEPLOY_URL/lastBuild/api/json"
  - export DEPLOY_RESULT_URL="$DEPLOY_URL/lastBuild/logText/progressiveText?start=0"
  - export GITLAB_EMAIL="$GITLAB_USER_EMAIL"

.static code analysis: # Disable for now
  stage: tests
  script:
    - python -u automation/run.py --stage phpunit-sonarqube
  coverage: '/^\s*Lines:\s*\d+.\d+\%/'
  cache:
    key: v2
    paths:
      - .composer-cache/
  allow_failure: true

php code sniffer:
  stage: tests
  script:
    - python -u automation/run.py --stage phpcs

es linter:
  stage: tests
  script:
    - python -u automation/run.py --stage eslinter

ts linter:
  stage: tests
  script:
    - python -u automation/run.py --stage tslinter

.sensiolabs security checker:
  stage: tests
  script:
    - python -u automation/run.py --stage sensiolab-security-checker
  allow_failure: true

create package:
  stage: package
  script:
    - python -u automation/run.py --stage package-v2
  artifacts:
    paths:
      - automation/deployed/*.jsonl
    expire_in: 1 month
  when: manual
  cache:
    key: v2
    paths:
      - .node-cache/
      - .composer-cache/
      - .yarn-cache/
  tags:
    - devrunner

qa1:
  stage: deploy-test
  environment:
    name: testing
  variables:
    env: tst
  script:
    - export DEPLOY_TOKEN DEPLOY_URL
    - bash automation/jenkins_deploy.sh
  when: manual
  dependencies:
    - create package
  tags:
    - ipvg-stg-02

.selenium tests qa1:
  stage: integration-tests-test
  script:
    - python -u automation/run.py --stage integration-tests-test
  when: manual
  dependencies:
    - qa1
  artifacts:
    paths:
      - automation/deployed/*.jsonl
    expire_in: 1 month

.hp fortify scan qa1:
  stage: security-tests-test
  script:
    - python -u automation/run.py --stage code-scan-testing
  artifacts:
    paths:
      - automation/deployed/*.jsonl
    expire_in: 1 month
  allow_failure: true
  when: manual

.jmeter qa1:
  stage: performance-tests-test
  script:
    - python -u automation/run.py --stage performance-tests-test
  when: manual
  dependencies:
    - qa1
  artifacts:
    paths:
      - automation/deployed/*.jsonl
    expire_in: 1 month
  tags:
    - jmeter

lighthouse qa1:
  stage: integration-tests-test
  when: manual
  script:
    - python -u automation/run.py --stage lighthouse-test
  artifacts:
    when: always
    paths:
      - automation/deployed/*.html
    expire_in: 1 month
  tags:
    - tstrunner

tct:
  stage: deploy-test
  environment:
    name: tct
  variables:
    env: tct
  script:
    - export DEPLOY_TOKEN DEPLOY_URL
    - bash automation/jenkins_deploy.sh
  when: manual
  dependencies:
    - create package
  tags:
    - ipvg-stg-02

  artifacts:
    paths:
      - automation/deployed/*.jsonl
    expire_in: 1 month

tct_o:
  stage: deploy-test
  environment:
    name: tct
  script:
    - DEPLOY_TCT=$DEPLOY_TCT_O
    - DEPLOY_TCT_TOWER_HOST=$DEPLOY_TCT_O_TOWER_HOST
    - python -u automation/run.py --stage deploy-tct
  when: manual
  dependencies:
    - create package
  artifacts:
    paths:
      - automation/deployed/*.jsonl
    expire_in: 1 month
  tags:
    - stgrunner_ipvg

.selenium tests tct:
  stage: integration-tests-test
  script:
    - python -u automation/run.py --stage integration-tests-tct
  when: manual
  dependencies:
    - tct
  artifacts:
    paths:
      - automation/deployed/*.jsonl
    expire_in: 1 month

.jmeter tct:
  stage: performance-tests-test
  script:
    - python -u automation/run.py --stage performance-tests-tct
  when: manual
  dependencies:
    - tct
  artifacts:
    paths:
      - automation/deployed/*.jsonl
    expire_in: 1 month
  tags:
    - jmeter

lighthouse tct:
  stage: integration-tests-test
  when: manual
  script:
    - python -u automation/run.py --stage lighthouse-tct
  artifacts:
    when: always
    paths:
      - automation/deployed/*.html
    expire_in: 1 month
  tags:
    - intrunner

testing signoff:
  stage: testing-signoff
  script:
    - python -u automation/run.py --stage testing-signoff
  when: manual
  dependencies:
    - qa1
    - tct
  artifacts:
    paths:
      - automation/deployed/*.jsonl
    expire_in: 1 month
  only:
    - /^release-.*$/
    - tags

uat:
  stage: deploy-staging
  environment:
    name: uat
  variables:
    env: uat
  script:
    - export DEPLOY_TOKEN DEPLOY_URL
    - bash automation/jenkins_deploy.sh
  when: manual
  dependencies:
    - testing signoff
  tags:
    - ipvg-stg-02

.selenium tests uat:
  stage: integration-tests-staging
  script:
    - python -u automation/run.py --stage integration-tests-uat
  when: manual
  dependencies:
    - uat
  artifacts:
    paths:
      - automation/deployed/*.jsonl
    expire_in: 1 month
  only:
    - /^release-.*$/
    - tags

.jmeter uat:
  stage: performance-tests-staging
  script:
    - python -u automation/run.py --stage performance-tests-uat
  when: manual
  dependencies:
    - uat
  artifacts:
    paths:
      - automation/deployed/*.jsonl
    expire_in: 1 month
  only:
    - /^release-.*$/
    - tags
  tags:
    - jmeter

lighthouse uat:
  stage: integration-tests-staging
  when: manual
  script:
    - python -u automation/run.py --stage lighthouse-uat
  artifacts:
    when: always
    paths:
      - automation/deployed/*.html
    expire_in: 1 month
  tags:
    - uatrunner

staging:
  stage: deploy-staging
  environment:
    name: staging
  variables:
    env: stg
  script:
    - export DEPLOY_TOKEN DEPLOY_URL
    - bash automation/jenkins_deploy.sh
  when: manual
  dependencies:
    - testing signoff
  tags:
    - ipvg-stg-02

staging_o:
  stage: deploy-staging
  environment:
    name: staging
  script:
    - DEPLOY_STG=$DEPLOY_STG_O
    - DEPLOY_STG_TOWER_HOST=$DEPLOY_STG_O_TOWER_HOST
    - python -u automation/run.py --stage deploy-staging
  when: manual
  dependencies:
    - testing signoff
  artifacts:
    paths:
      - automation/deployed/*.jsonl
    expire_in: 1 month
  only:
    - /^release-.*$/
    - tags
  tags:
    - stgrunner_ipvg

.selenium tests staging:
  stage: integration-tests-staging
  script:
    - python -u automation/run.py --stage integration-tests-stg
  when: manual
  dependencies:
    - staging
  artifacts:
    paths:
      - automation/deployed/*.jsonl
    expire_in: 1 month
  only:
    - /^release-.*$/
    - tags

.jmeter staging:
  stage: performance-tests-staging
  script:
    - python -u automation/run.py --stage performance-tests-staging
  when: manual
  dependencies:
    - staging
  artifacts:
    paths:
      - automation/deployed/*.jsonl
    expire_in: 1 month
  only:
    - /^release-.*$/
    - tags
  tags:
    - jmeter

lighthouse stg:
  stage: integration-tests-staging
  when: manual
  script:
    - python -u automation/run.py --stage lighthouse-stg
  artifacts:
    when: always
    paths:
      - automation/deployed/*.html
    expire_in: 1 month
  tags:
    - stgrunner

.acunetix staging:
  stage: security-tests-staging
  script:
    - python -u automation/run.py --stage acunetix-scan
  when: manual
  dependencies:
    - staging
  artifacts:
    paths:
      - automation/deployed/*.jsonl
    expire_in: 1 month
  only:
    - /^release-.*$/
    - tags

staging signoff:
  stage: staging-signoff
  script:
    - python -u automation/run.py --stage staging-signoff
  when: manual
  dependencies:
    - staging
    - uat
  artifacts:
    paths:
      - automation/deployed/*.jsonl
    expire_in: 1 month
  only:
    - /^release-.*$/
    - tags

production:
  stage: deploy-production
  environment:
    name: production
  variables:
    env: prd
  script:
    - DEPLOY_TOKEN=$DEPLOY_PRD_TOKEN
    - DEPLOY_URL=$DEPLOY_PRD_URL
    - export DEPLOY_TOKEN DEPLOY_URL
    - export DEPLOY_STATUS_URL="$DEPLOY_URL/lastBuild/api/json"
    - export DEPLOY_RESULT_URL="$DEPLOY_URL/lastBuild/logText/progressiveText?start=0"
    - bash automation/jenkins_deploy.sh
  when: manual
  dependencies:
    - create package
    - staging
  only:
    - /^release-.*$/
    - tags
    - /^jenkins/
  tags:
    - taiwan-prd-01
